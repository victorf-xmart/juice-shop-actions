name: Security Scan
on:
  push:
    branches:
      - main

jobs:
  quality-gate-test:
    # https://github.com/actions/runner-images/issues/10636  
    runs-on: ubuntu-latest
    steps:
      # Checkout do c√≥digo fonte
      - uses: actions/checkout@v4

      # Execu√ß√£o do scan
      - name: XGuardian Security Scan
        uses: ./.github/actions/xguardian-actions # xmart-xguardian/xguardian-actions@main
        with:
          api_email: ${{ secrets.API_EMAIL }}
          api_password: ${{ secrets.API_PASSWORD }}
          api_token: ${{ secrets.API_TOKEN }}
          gh_token: ${{ secrets.GH_TOKEN }}
          is_development: "true"
          app_name: "nome-da-aplicacao"
          team_id: "[1115]"
          # dast: "true"
          # site_url: "https://google-gruyere.appspot.com/624428532281904487808630263280165796082/"
          sast: "true"

# name: Build and Security Scan
# # coment para testes workflow

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]
#   workflow_dispatch:

# jobs:
#   build-and-scan:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: read
#       security-events: write
      
#     steps:
#       # Exemplo de como checar o c√≥digo-fonte do reposit√≥rio
#       - name: Checar o c√≥digo-fonte do reposit√≥rio
#         uses: actions/checkout@v4

#       # Exemplo de como instalar e configurar o Node.js
#       # - name: Setup Node.js
#       #   uses: actions/setup-node@v4
#       #   with:
#       #     node-version: '20'
#       #     cache: 'npm'
      
#       # Exemplo de como instalar as depend√™ncias de uma aplica√ß√£o Node.js
#       # - name: Install dependencies
#       #   run: npm ci

#       # Exemplo de como buildar uma aplica√ß√£o Node.js
#       # - name: Build application
#       #   run: npm run build
#       # Assumindo que isso gera os arquivos em ./dist

#       # Exemplo de como executar o XGuardian Security Scan
#       - name: Executar scan de seguran√ßa
#         id: xguardian
#         uses: xmart-xguardian/xguardian-actions@main # ./.github/actions/xguardian-actions
#         with:
#           # Vari√°veis de segredo obrigat√≥rias
#           api_email: ${{ secrets.API_EMAIL }}
#           api_password: ${{ secrets.API_PASSWORD }}
#           api_token: ${{ secrets.API_TOKEN }}
#           gh_token: ${{ secrets.GH_TOKEN }}
#           app_name: ${{ github.event.repository.name }}

#           # Opcionais (mas, com valores default)
#           # Configura√ß√µes para criar uma aplica√ß√£o
#           scan_directory: '.' # Analisando todo o c√≥digo-fonte por padr√£o
#           # scan_directory: 'dist' # Descomente e ajuste se quiser analisar apenas o c√≥digo buildado
#           team_id: '[1]'
#           languages: '["JavaScript"]'
#           description: "Aplica√ß√£o criada atrav√©s do GitHub Actions - XGuardian"
#           policy_sast: '0'
#           policy_sca: '0'
#           policy_dast: '0'
#           microservices: "false"
#           microservices_data: '[{"name": "MS1", "language": ["JavaScript"]}]'
#           sast: "false"
#           sca: "false"
#           dast: "true"
#           translate: "false"
#           exclude: ""
#           pdf: "false"

#           # Scan DAST
#           site_url: "https://google-gruyere.appspot.com/624428532281904487808630263280165796082/"
#           auth_url: "https://google-gruyere.appspot.com/624428532281904487808630263280165796082/login"
#           logout_url: "https://google-gruyere.appspot.com/624428532281904487808630263280165796082/logout"
#           auth_exist: false
#           user_login: "abcdef"
#           password_login: "123456"

#       # Exemplo de como verificar os outputs do scan
#       - name: Debug outputs
#         run: |
#           echo "app_id: ${{ steps.xguardian.outputs.app_id }}"
#           echo "scan_id: ${{ steps.xguardian.outputs.scan_id }}"
#           echo "scan_url: ${{ steps.xguardian.outputs.scan_url }}"

#       # Exemplo de como checar os resultados do scan
#       - name: Verificar status do scan
#         if: always()
#         env:
#           APP_ID: ${{ steps.xguardian.outputs.app_id }}
#           SCAN_ID: ${{ steps.xguardian.outputs.scan_id }}
#           SCAN_URL: ${{ steps.xguardian.outputs.scan_url }}
#         run: |
#           if [ "${{ steps.xguardian.outcome }}" == "success" ]; then
#             # Verificar se as vari√°veis est√£o definidas
#             if [ -n "$APP_ID" ] && [ -n "$SCAN_ID" ] && [ -n "$SCAN_URL" ]; then
#               echo "‚úÖ Scan iniciado com sucesso!"
#               echo "üÜî App ID: $APP_ID"
#               echo "üìù Scan ID: $SCAN_ID"
#               echo "üìä Resultados ficar√£o dispon√≠veis em: $SCAN_URL"
#             else
#               echo "‚ö†Ô∏è Scan iniciado, mas algumas informa√ß√µes do output est√£o faltando:"
#               echo "APP_ID: ${APP_ID:-'n√£o definido'}"
#               echo "SCAN_ID: ${SCAN_ID:-'n√£o definido'}"
#               echo "SCAN_URL: ${SCAN_URL:-'n√£o definido'}"
#               exit 1
#             fi
#           else
#             echo "‚ùå Falha no scan de seguran√ßa"
#             exit 1
#           fi
          
#       # Exemplo de como utilizar o Slack para notificar o resultado do scan
#       # - name: Notificar no Slack
#       #   uses: rtCamp/action-slack-notify@v2
#       #   env:
#       #     SLACK_WEBHOOK: secrets.SLACK_WEBHOOK
#       #     SLACK_MESSAGE: |
#       #       Build e Scan conclu√≠dos
#       #       Reposit√≥rio: github.repository
#       #       Branch: github.ref_name
#       #       Resultados: steps.xguardian.outputs.scan_url

#       # - name: Notificar no Microsoft Teams
#       #   uses: aliencube/microsoft-teams-actions@v0.8.0
#       #   with:
#       #     webhook_uri: secrets.MS_TEAMS_WEBHOOK_URI
#       #     title: "Resultados do scan de seguran√ßa"
#       #     summary: "XGuardian Security Scan conclu√≠do"
#       #     sections: |
#       #       [{
#       #         "activityTitle": "Resultados do scan de seguran√ßa",
#       #         "activitySubtitle": "${{ github.repository  - ${{ github.ref_name ",
#       #         "facts": [
#       #           {
#       #             "name": "Status",
#       #             "value": "${{ job.status "
#       #           },
#       #           {
#       #             "name": "Scan ID",
#       #             "value": "${{ steps.xguardian.outputs.scan_id "
#       #           }
#       #         ],
#       #         "potentialAction": [
#       #           {
#       #             "@type": "OpenUri",
#       #             "name": "View Results",
#       #             "targets": [
#       #               {
#       #                 "os": "default",
#       #                 "uri": "${{ steps.xguardian.outputs.scan_url "
#       #               }
#       #             ]
#       #           }
#       #         ]
#       #       }]

#       # - name: Notificar no Zoom Chat
#       #   run: |
#       #     curl -X POST "https://zoom.us/v2/im/chat/messages" \
#       #     -H "Authorization: Bearer ${{ secrets.ZOOM_CHAT_TOKEN " \
#       #     -H "Content-Type: application/json" \
#       #     -d '{
#       #       "to_channel": "security-channel",
#       #       "message": "üîí Security Scan completed\nRepository: ${{ github.repository \nResults: ${{ steps.xguardian.outputs.scan_url "
#       #     }'